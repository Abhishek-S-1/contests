# https://leetcode.com/problems/maximum-sum-of-an-hourglass/

class Solution:
    def maxSum(self, grid: List[List[int]]) -> int:
        
        #O(7*n^2)
        #785ms(20%) and 17.1MB(80%)
        mx=0
        m=len(grid)
        n=len(grid[0])
        for i in range(m-2):
            for j in range(n-2):
                mSum=0
                for k in range(j,j+3):
                    mSum+=grid[i][k]
                for k in range(j,j+3):
                    mSum+=grid[i+2][k]
                mSum+=grid[i+1][j+1]
                
                if mSum>mx:
                    mx=mSum
        return mx
    
    
        """
        #One liner
        #563ms(20%) 17.2MB(40%)
        return max([sum(grid[i][j:j+3]) + grid[i+1][j+1] + sum(grid[i+2][j:j+3]) for i in range(len(grid)-2) for j in range(len(grid[0])-2)])
        """
